DOMANDE E RISPOSTE

1- Selezionare tutte le software house americane (3)
1- SELECT * 
FROM software_houses
WHERE country ='united states';


2- Selezionare tutti i giocatori della città di 'Rogahnland' (2)
2-SELECT * FROM players WHERE city = 'Rogahnland';


3- Selezionare tutti i giocatori il cui nome finisce per "a" (220)
3-SELECT * FROM players WHERE name LIKE '%a';


4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)
4-SELECT * FROM reviews WHERE player_id = 800;


5- Contare quanti tornei ci sono stati nell'anno 2015 (9)
5-SELECT COUNT(*) FROM player_tournament WHERE YEAR(DATE) = 2015; **********************



6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)
6-SELECT * FROM awards WHERE description LIKE '%facere%';



7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)
7-SELECT DISTINCT videogame_id  FROM category_videogame  WHERE category_id  IN (2, 6); ****************************



8- Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)
8-SELECT * FROM reviews WHERE rating BETWEEN 2 AND 4;



9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)
9-SELECT * FROM videogames WHERE YEAR(release_date) = 2020;


10- Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da stelle, mostrandoli una sola volta (443)
10-SELECT DISTINCT videogames.id
FROM videogames
JOIN reviews ON videogames.id = reviews.videogame_id
WHERE reviews.rating = 5;





#### Bonus
11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3.16 circa)
11-SELECT COUNT(*), AVG(rating) FROM reviews WHERE videogame_id  = 412;


12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)
12-SELECT COUNT(*) FROM videogames WHERE software_house_id = 1 AND YEAR(release_date) = 2018;


***********************************************************************************************************************
1- Contare quante software house ci sono per ogni paese (3)
1- SELECT country, COUNT(*) FROM software_houses GROUP BY country;

2- Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)
2-SELECT videogame_id, COUNT(*) FROM reviews GROUP BY videogame_id;

3- Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)
3-SELECT pegi_labels, COUNT(*) FROM videogames GROUP BY pegi_labels_id;*****************************

4- Mostrare il numero di videogiochi rilasciati ogni anno (11)
4- SELECT YEAR(release_date), COUNT(*) FROM videogames GROUP BY YEAR(release_date);

5- Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)
5-SELECT device_id, COUNT(*) FROM device_videogame GROUP BY device_id;

6- Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)
6-SELECT videogame_id FROM reviews GROUP BY videogame_id ORDER BY AVG(rating) DESC;



***********************************************************************************************************************

1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)
1-SELECT DISTINCT players.* FROM players
JOIN reviews ON players.id = reviews.player_id;



2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)
2-SELECT DISTINCT v.*
FROM videogames v
JOIN tournament_videogame tv ON v.id = tv.videogame_id 
JOIN tournaments t ON tv.tournament_id = t.id
WHERE t.`year`= 2016;





3- Mostrare le categorie di ogni videogioco (1718)
3-SELECT videogames.id, categories.name FROM videogames
JOIN category_videogame ON videogames.id = category_videogame.videogame_id
JOIN categories ON category_videogame.category_id = categories.id;

4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)
4-SELECT DISTINCT software_houses.* FROM software_houses
JOIN videogames ON software_houses.id = videogames.software_house_id
WHERE YEAR(videogames.release_date) > 2020;

5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)
5-SELECT awards.* FROM awards
JOIN videogames ON award_id = videogames.id; **********************************************




6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)
6-SELECT DISTINCT categories.id, categories.name, pegi_labels.id AS pegi_id 
FROM categories
JOIN category_videogame ON categories.id = category_videogame.category_id
JOIN reviews ON category_videogame.videogame_id = reviews.videogame_id
JOIN pegi_labels ON categories.pegi_id = pegi_labels.id
WHERE reviews.rating IN ('4 stelle', '5 stelle'); **********************************************

7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)
7-SELECT DISTINCT videogames.* FROM videogames
JOIN tournament_videogame ON videogames.id = tournament_videogame.videogame_id
JOIN tournaments ON tournament_videogame.tournament_id = tournaments.id
JOIN player_tournament ON tournaments.id = player_tournament.tournament_id
JOIN players ON player_tournament.player_id = players.id
WHERE players.name LIKE 'S%';


8- Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 (36)
8-SELECT DISTINCT players.city 
FROM players
JOIN player_tournament ON players.id = player_tournament.player_id
JOIN tournaments ON player_tournament.tournament_id = tournaments.id
JOIN videogames ON tournaments.videogame_id = videogames.id
WHERE YEAR(tournaments.date) = 2018 AND videogames.is_game_of_the_year = 1; **********************************************

9- Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019 (3306)
9-SELECT DISTINCT players.*
FROM players
JOIN player_tournament ON players.id = player_tournament.player_id
JOIN tournaments ON player_tournament.tournament_id = tournaments.id
JOIN tournament_videogame ON tournaments.id = tournament_videogame.tournament_id
JOIN videogames ON tournament_videogame.videogame_id = videogames.id
WHERE videogames.release_date = (SELECT MAX(videogames.release_date) FROM videogames WHERE YEAR(videogames.release_date) = 2018)
  AND YEAR(tournaments.year) = 2019;
***************************************




#### Bonus
10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)
10-SELECT software_houses.*, videogames.*
FROM software_houses
JOIN videogames ON software_houses.id = videogames.software_house_id
WHERE videogames.id = (SELECT MIN(id) FROM videogames); (risultato diverso)

11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)
11-SELECT id, name, release_date, (SELECT COUNT(*) FROM reviews WHERE videogame_id = videogames.id) AS total_reviews
FROM videogames
ORDER BY total_reviews DESC
LIMIT 1;


12- Selezionare la software house che ha vinto più premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)
12-SELECT software_house_id, COUNT(*) AS total_awards
FROM awards
WHERE YEAR(date) BETWEEN 2015 AND 2016
GROUP BY software_house_id
ORDER BY total_awards DESC
LIMIT 1;***************************************


13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 1.5 (10)
13-SELECT categories.name, AVG(reviews.rating) AS average_rating
FROM categories
JOIN category_videogame ON categories.id = category_videogame.category_id
JOIN videogames ON category_videogame.videogame_id = videogames.id
LEFT JOIN reviews ON videogames.id = reviews.videogame_id
GROUP BY categories.id
HAVING AVG(reviews.rating) < 1.5;
 *****************************************










